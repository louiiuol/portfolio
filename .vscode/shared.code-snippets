{
	"Angular -> Component": {
		"scope": "typescript",
		"prefix": "ngComponent",
		"description": "Angular Standalone Component",
		"body": [
			"import { ChangeDetectionStrategy, Component } from '@angular/core';",
			"",
			"@Component({",
			"  selector: 'app-${1:name}',",
			"  host: { class: '' },",
			"  template: `${4}`,",
			" imports: [${5}],",
			"  changeDetection: ChangeDetectionStrategy.OnPush,",
			"})",
			"export class ${2:name}Component {${3}}",
		],
	},

	"Angular -> Directive": {
		"scope": "typescript",
		"prefix": "ngDirective",
		"description": "Angular Standalone Directive",
		"body": [
			"import { Directive } from '@angular/core';",
			"",
			"@Directive({",
			"  selector: '[${1:name}]',",
			"})",
			"export class ${2:name}Directive {${3}}",
		],
	},

	"Angular -> Pipe": {
		"scope": "typescript",
		"prefix": "ngPipe",
		"description": "Angular Standalone Pipe",
		"body": [
			"import type { PipeTransform } from '@angular/core';",
			"import { Pipe } from '@angular/core';",
			"",
			"@Pipe({",
			"  name: '${1:selector}',",
			"})",
			"export class ${2:name}Pipe implements PipeTransform {",
			"  transform(value: ${3:valueType}) {",
			"    return ${4:value};",
			"  }",
			"}",
		],
	},

	"Angular -> IconComponent": {
		"scope": "typescript",
		"prefix": "ngIcon",
		"description": "Angular Icon Component",
		"body": [
			"import { ChangeDetectionStrategy, Component, input } from '@angular/core';",
			"import type { IconSize } from './icon-size.type';",
			"",
			"@Component({",
			"  selector: 'app-icon-${1:name}',",
			"  host: {",
			"    'class': 'app-icon',",
			"    '[class]': 'size()'",
			"  },",
			"  template: `<svg xmlns='http://www.w3.org/2000/svg' class='fill-current' ${4}></svg>,",
			"  changeDetection: ChangeDetectionStrategy.OnPush,",
			"})",
			"export class ${2:name}Icon {",
			"  size = input<IconSize>('size-4');",
			"}",
		],
	},

	"Angular -> Service": {
		"scope": "typescript",
		"prefix": "ngService",
		"description": "Angular Service",
		"body": [
			"import { Injectable } from '@angular/core';",
			"",
			"@Injectable({providedIn: 'root'})",
			"export class ${1:name}Service {${2}}",
		],
	},

	"Angular -> Test Component": {
		"prefix": "ngTestComponent",
		"body": [
			"import type { ComponentFixture } from '@angular/core/testing';",
			"import { TestBed } from '@angular/core/testing';",
			"import { ${1:MyComponent} } from './${1/(.*)/${1:/downcase}/}.component';",
			"",
			"describe('${1:MyComponent}', () => {",
			"\tlet fixture: ComponentFixture<${1:MyComponent}>;",
			"\tlet compiled: HTMLElement;",
			"",
			"\tbeforeEach(() => {",
			"\t\tfixture = TestBed.configureTestingModule({",
			"\t\t\timports: [${1:MyComponent}],",
			"\t\t}).createComponent(${1:MyComponent});",
			"\t\t// Set any required inputs here if needed",
			"\t\tfixture.detectChanges();",
			"\t\tcompiled = fixture.nativeElement as HTMLElement;",
			"\t});",
			"",
			"\tit('should display the correct default content', () => {",
			"\t\texpect(compiled.textContent).toContain(",
			"\t\t\tfixture.componentInstance.${2:someMethod}()",
			"\t\t);",
			"\t});",
			"",
			"\tit('should update when input changes', () => {",
			"\t\tfixture.componentRef.setInput('${3:inputName}', ${4:() => 'new value'});",
			"\t\tfixture.detectChanges();",
			"",
			"\t\texpect(compiled.textContent).toContain(",
			"\t\t\t${5:'new value'}",
			"\t\t);",
			"\t});",
			"});",
		],
		"description": "Generic Angular component unit test template",
	},

	"Test function": {
		"prefix": "fnTest",
		"body": [
			"import { ${1:myFunction} } from './${1/(.*)/${1:/downcase}/}.fn';",
			"",
			"describe('${1:myFunction}', () => {",
			"\tit('should return ${2:expectedResult} when ${3:condition}', () => {",
			"\t\tconst input = ${4:/* your input here */};",
			"\t\texpect(${1:myFunction}(input)).toBe(${2:expectedResult});",
			"\t});",
			"",
			"\tit('should return ${5:expectedResult} when ${6:other condition}', () => {",
			"\t\tconst input = ${7:/* your input here */};",
			"\t\texpect(${1:myFunction}(input)).toBe(${5:expectedResult});",
			"\t});",
			"",
			"\tit('should handle null or undefined inputs', () => {",
			"\t\texpect(${1:myFunction}(null as any)).toBe(${8:expectedResult});",
			"\t\texpect(${1:myFunction}(undefined as any)).toBe(${8:expectedResult});",
			"\t});",
			"});",
		],
		"description": "Template for unit testing an isolated function with multiple scenarios",
	},
}
